# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CreateComment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, user_id: str=None, time: str=None, contents: str=None):  # noqa: E501
        """CreateComment - a model defined in Swagger

        :param id: The id of this CreateComment.  # noqa: E501
        :type id: str
        :param user_id: The user_id of this CreateComment.  # noqa: E501
        :type user_id: str
        :param time: The time of this CreateComment.  # noqa: E501
        :type time: str
        :param contents: The contents of this CreateComment.  # noqa: E501
        :type contents: str
        """
        self.swagger_types = {
            'id': str,
            'user_id': str,
            'time': str,
            'contents': str
        }

        self.attribute_map = {
            'id': '_id',
            'user_id': 'user_id',
            'time': 'time',
            'contents': 'contents'
        }

        self._id = id
        self._user_id = user_id
        self._time = time
        self._contents = contents

    @classmethod
    def from_dict(cls, dikt) -> 'CreateComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The createComment of this CreateComment.  # noqa: E501
        :rtype: CreateComment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this CreateComment.


        :return: The id of this CreateComment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this CreateComment.


        :param id: The id of this CreateComment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def user_id(self) -> str:
        """Gets the user_id of this CreateComment.


        :return: The user_id of this CreateComment.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this CreateComment.


        :param user_id: The user_id of this CreateComment.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def time(self) -> str:
        """Gets the time of this CreateComment.


        :return: The time of this CreateComment.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time: str):
        """Sets the time of this CreateComment.


        :param time: The time of this CreateComment.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def contents(self) -> str:
        """Gets the contents of this CreateComment.


        :return: The contents of this CreateComment.
        :rtype: str
        """
        return self._contents

    @contents.setter
    def contents(self, contents: str):
        """Sets the contents of this CreateComment.


        :param contents: The contents of this CreateComment.
        :type contents: str
        """
        if contents is None:
            raise ValueError("Invalid value for `contents`, must not be `None`")  # noqa: E501

        self._contents = contents
