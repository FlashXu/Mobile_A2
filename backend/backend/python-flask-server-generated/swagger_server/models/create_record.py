# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CreateRecord(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, user_id: str=None, start_time: str=None, end_time: str=None, coordinate: List[List[float]]=None, distance: str=None):  # noqa: E501
        """CreateRecord - a model defined in Swagger

        :param user_id: The user_id of this CreateRecord.  # noqa: E501
        :type user_id: str
        :param start_time: The start_time of this CreateRecord.  # noqa: E501
        :type start_time: str
        :param end_time: The end_time of this CreateRecord.  # noqa: E501
        :type end_time: str
        :param coordinate: The coordinate of this CreateRecord.  # noqa: E501
        :type coordinate: List[List[float]]
        :param distance: The distance of this CreateRecord.  # noqa: E501
        :type distance: str
        """
        self.swagger_types = {
            'user_id': str,
            'start_time': str,
            'end_time': str,
            'coordinate': List[List[float]],
            'distance': str
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'start_time': 'start_time',
            'end_time': 'end_time',
            'coordinate': 'coordinate',
            'distance': 'distance'
        }

        self._user_id = user_id
        self._start_time = start_time
        self._end_time = end_time
        self._coordinate = coordinate
        self._distance = distance

    @classmethod
    def from_dict(cls, dikt) -> 'CreateRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The createRecord of this CreateRecord.  # noqa: E501
        :rtype: CreateRecord
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this CreateRecord.


        :return: The user_id of this CreateRecord.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this CreateRecord.


        :param user_id: The user_id of this CreateRecord.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def start_time(self) -> str:
        """Gets the start_time of this CreateRecord.


        :return: The start_time of this CreateRecord.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this CreateRecord.


        :param start_time: The start_time of this CreateRecord.
        :type start_time: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self) -> str:
        """Gets the end_time of this CreateRecord.


        :return: The end_time of this CreateRecord.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: str):
        """Sets the end_time of this CreateRecord.


        :param end_time: The end_time of this CreateRecord.
        :type end_time: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time

    @property
    def coordinate(self) -> List[List[float]]:
        """Gets the coordinate of this CreateRecord.


        :return: The coordinate of this CreateRecord.
        :rtype: List[List[float]]
        """
        return self._coordinate

    @coordinate.setter
    def coordinate(self, coordinate: List[List[float]]):
        """Sets the coordinate of this CreateRecord.


        :param coordinate: The coordinate of this CreateRecord.
        :type coordinate: List[List[float]]
        """
        if coordinate is None:
            raise ValueError("Invalid value for `coordinate`, must not be `None`")  # noqa: E501

        self._coordinate = coordinate

    @property
    def distance(self) -> str:
        """Gets the distance of this CreateRecord.


        :return: The distance of this CreateRecord.
        :rtype: str
        """
        return self._distance

    @distance.setter
    def distance(self, distance: str):
        """Sets the distance of this CreateRecord.


        :param distance: The distance of this CreateRecord.
        :type distance: str
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance
