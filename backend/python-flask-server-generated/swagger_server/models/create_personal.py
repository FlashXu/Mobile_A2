# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CreatePersonal(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, gender: str=None, age: str=None, phone: str=None, email: str=None):  # noqa: E501
        """CreatePersonal - a model defined in Swagger

        :param id: The id of this CreatePersonal.  # noqa: E501
        :type id: str
        :param name: The name of this CreatePersonal.  # noqa: E501
        :type name: str
        :param gender: The gender of this CreatePersonal.  # noqa: E501
        :type gender: str
        :param age: The age of this CreatePersonal.  # noqa: E501
        :type age: str
        :param phone: The phone of this CreatePersonal.  # noqa: E501
        :type phone: str
        :param email: The email of this CreatePersonal.  # noqa: E501
        :type email: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'gender': str,
            'age': str,
            'phone': str,
            'email': str
        }

        self.attribute_map = {
            'id': '_id',
            'name': 'name',
            'gender': 'gender',
            'age': 'age',
            'phone': 'phone',
            'email': 'email'
        }

        self._id = id
        self._name = name
        self._gender = gender
        self._age = age
        self._phone = phone
        self._email = email

    @classmethod
    def from_dict(cls, dikt) -> 'CreatePersonal':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The createPersonal of this CreatePersonal.  # noqa: E501
        :rtype: CreatePersonal
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this CreatePersonal.


        :return: The id of this CreatePersonal.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this CreatePersonal.


        :param id: The id of this CreatePersonal.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this CreatePersonal.


        :return: The name of this CreatePersonal.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CreatePersonal.


        :param name: The name of this CreatePersonal.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def gender(self) -> str:
        """Gets the gender of this CreatePersonal.


        :return: The gender of this CreatePersonal.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this CreatePersonal.


        :param gender: The gender of this CreatePersonal.
        :type gender: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")  # noqa: E501

        self._gender = gender

    @property
    def age(self) -> str:
        """Gets the age of this CreatePersonal.


        :return: The age of this CreatePersonal.
        :rtype: str
        """
        return self._age

    @age.setter
    def age(self, age: str):
        """Sets the age of this CreatePersonal.


        :param age: The age of this CreatePersonal.
        :type age: str
        """
        if age is None:
            raise ValueError("Invalid value for `age`, must not be `None`")  # noqa: E501

        self._age = age

    @property
    def phone(self) -> str:
        """Gets the phone of this CreatePersonal.


        :return: The phone of this CreatePersonal.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this CreatePersonal.


        :param phone: The phone of this CreatePersonal.
        :type phone: str
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    @property
    def email(self) -> str:
        """Gets the email of this CreatePersonal.


        :return: The email of this CreatePersonal.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this CreatePersonal.


        :param email: The email of this CreatePersonal.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email
